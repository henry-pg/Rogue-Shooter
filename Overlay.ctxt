#BlueJ class context
comment0.target=Overlay
comment0.text=\r\n\ This\ is\ the\ class\ that\ controls\ and\ draws\ all\ of\ the\ pixels\ involved\ with\ simulating\ writing\ and\ erasing\ for\ the\ \r\n\ game.\ This\ method\ also\ calculates\ the\ total\ surface\ area\ that\ the\ pencil\ has\ drawn\ for\ on\ the\ screen.\ Generally,\ the\ \r\n\ way\ that\ this\ class\ works\ is\ there\ is\ a\ 2D\ boolean\ array\ that\ stores\ that\ state\ of\ all\ the\ pixels\ in\ the\ overlay.\ If\ \r\n\ the\ pixel\ is\ transparent,\ the\ value\ is\ false.\ If\ the\ pixel\ is\ coloured,\ the\ value\ is\ true.\ There\ are\ write\ and\ erase\ \r\n\ methods\ to\ change\ the\ values\ in\ this\ 2D\ boolean\ array\ based\ on\ the\ pencil\ and\ eraser\ classes.\ Then\ there\ are\ methods\ that\ actually\r\n\ read\ the\ 2D\ array\ and\ visually\ implement\ the\ changes.\ Since\ this\ task\ is\ relatively\ demanding,\ the\ methods\ that\ actually\ \r\n\ implement\ the\ visual\ changes\ are\ split\ into\ two\:\ left\ and\ right.\ One\ implements\ the\ visual\ changes\ on\ the\ right\ side\ of\ the\ screen\r\n\ and\ the\ other\ implements\ the\ visual\ changes\ on\ the\ left\ side.\ Every\ other\ act,\ one\ of\ the\ two\ methods\ are\ called\ to\ reduce\r\n\ the\ use\ of\ resources.\ \r\n\ \r\n\ @author\ Henry\ and\ Johnathan\r\n\ @version\ (June\ 5)\r\n
comment1.params=
comment1.target=Overlay()
comment1.text=\r\n\ Constructor\ for\ Overlay\ class\r\n
comment10.params=xPixel\ yPixel\ inkWidth
comment10.target=void\ write(int,\ int,\ int)
comment10.text=\r\n\ This\ is\ a\ method\ that\ based\ on\ location,\ writes/\ colours\ in\ pixels.\r\n\ \r\n\ @param\ xPixel\ The\ x\ location\ of\ the\ pixel\ to\ be\ coloured.\r\n\ @param\ yPixel\ The\ y\ location\ of\ the\ pixel\ to\ be\ coloured.\r\n\ @param\ inkWidth\ How\ many\ pixels\ wide/tall\ to\ cover.\r\n
comment11.params=
comment11.target=void\ overlayDrawLeft()
comment11.text=\r\n\ This\ method\ draws\ the\ left\ side\ of\ the\ overlay,\ and\ updates\ the\ overlay\ image.\r\n
comment12.params=
comment12.target=void\ overlayDrawRight()
comment12.text=\r\n\ This\ method\ draws\ the\ right\ side\ of\ the\ overlay,\ and\ updates\ the\ overlay\ image.\r\n
comment13.params=
comment13.target=void\ reset()
comment13.text=\r\n\ This\ method\ 'resets'\ the\ overlay\ by\ erasing\ all\ the\ drawn\ pixels\ and\ return\ the\ overlay\ to\ having\ all\ of\ its\ pixels\ being\ transparent.\r\n
comment14.params=bi
comment14.target=java.awt.image.BufferedImage\ deepCopy(java.awt.image.BufferedImage)
comment14.text=\r\n\ Mr.\ Cohen's\ method\ to\ return\ a\ deep\ copy\ of\ a\ bufferedimage.\r\n
comment15.params=newBi
comment15.target=greenfoot.GreenfootImage\ createGreenfootImageFromBI(java.awt.image.BufferedImage)
comment15.text=\r\n\ Takes\ in\ a\ BufferedImage\ and\ returns\ a\ GreenfootImage.\r\n\ \r\n\ @param\ newBi\ The\ BufferedImage\ to\ convert.\r\n\ \r\n\ @return\ GreenfootImage\ \ \ A\ GreenfootImage\ built\ from\ the\ BufferedImage\ provided.\r\n
comment16.params=rgbaValue
comment16.target=int[]\ unpackPixel(int)
comment16.text=\r\n\ Takes\ in\ an\ rgb\ value\ -\ the\ kind\ that\ is\ returned\ from\ BufferedImage's\r\n\ getRGB()\ method\ -\ and\ returns\ 4\ integers\ for\ easy\ manipulation.\r\n\ \r\n\ By\ Jordan\ Cohen\r\n\ Version\ 0.2\r\n\ \r\n\ @param\ rgbaValue\ The\ value\ of\ a\ single\ pixel\ as\ an\ integer,\ representing<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 8\ bits\ for\ red,\ green\ and\ blue\ and\ 8\ bits\ for\ alpha\:<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>00000000000000000000000000000000</pre>\r\n\ @return\ int[4]\ \ \ Array\ containing\ 4\ shorter\ ints<br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>0\ \ \ \ \ \ \ 1\ \ \ \ \ \ \ 2\ \ \ \ \ \ \ 3</pre>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <pre>alpha\ \ \ red\ \ \ \ \ green\ \ \ blue</pre>\r\n
comment17.params=r\ g\ b\ a
comment17.target=int\ packagePixel(int,\ int,\ int,\ int)
comment17.text=\r\n\ Takes\ in\ a\ red,\ green,\ blue\ and\ alpha\ integer\ and\ uses\ bit-shifting\r\n\ to\ package\ all\ of\ the\ data\ into\ a\ single\ integer.\r\n\ \r\n\ @param\ \ \ int\ red\ value\ (0-255)\r\n\ @param\ \ \ int\ green\ value\ (0-255)\r\n\ @param\ \ \ int\ blue\ value\ (0-255)\r\n\ @param\ \ \ int\ alpha\ value\ (0-255)\r\n\ \r\n\ @return\ int\ \ Integer\ representing\ 32\ bit\ integer\ pixel\ ready\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ for\ BufferedImage\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Act\ method\ for\ the\ overlay\ class.\ The\ act\ method\ controls\ all\ of\ the\ surface\ area\ calculations\ and\ draws/updates\r\n\ the\ overlay\ image.\r\n
comment3.params=
comment3.target=java.awt.image.BufferedImage\ getBufferedImage()
comment3.text=\r\n\ This\ is\ a\ Mr.\ Cohen\ method\ that\ returns\ a\ buffered\ image\ from\ a\ GreenfootImage.\r\n
comment4.params=image
comment4.target=void\ updateOverlay(greenfoot.GreenfootImage)
comment4.text=\r\n\ This\ is\ a\ method\ that\ updates\ the\ overlayImage\ with\ the\ given\ parameter\ image.\r\n\ \r\n\ @param\ image\ GreenfootImage\ that\ is\ to\ be\ set\ as\ the\ new\ current\ overlayImage.\r\n
comment5.params=xPixel\ yPixel\ eraseWidth
comment5.target=void\ erase(int,\ int,\ int)
comment5.text=\r\n\ This\ is\ a\ method\ that\ based\ on\ location,\ essentially\ erases\ drawn\ pixels\ by\ making\ updates\ to\ the\ colorGrid\ array.\r\n\ \r\n\ @param\ xPixel\ The\ x\ location.\r\n\ @param\ yPixel\ The\ y\ Location.\r\n\ @param\ eraseWidth\ The\ width\ to\ be\ erased.\r\n
comment6.params=xPixel\ yPixel\ eraseWidth
comment6.target=int\ eraseGetValue(int,\ int,\ int)
comment6.text=\r\n\ This\ is\ a\ method\ that\ returns\ the\ amount\ of\ drawn\ pixels\ that\ have\ been\ erased.\ This\ is\ used\ by\ some\ Eraser\ subclasses\ \r\n\ for\ their\ behaviour.\ \r\n\ \r\n\ @param\ xPixel\ The\ x\ location.\r\n\ @param\ yPixel\ The\ y\ Location.\r\n\ @param\ eraseWidth\ The\ width\ to\ be\ erased.\r\n\ @return\ int\ A\ number\ of\ erased\ pixels\ are\ returned\r\n
comment7.params=
comment7.target=double\ calculateSurfaceArea()
comment7.text=\r\n\ This\ method\ calculates\ the\ percentage\ of\ pixels\ that\ are\ coloured\ in.\r\n\ \r\n\ @return\ double\ this\ is\ a\ percent\ of\ the\ pixels\ that\ are\ coloured\ in.\r\n
comment8.params=
comment8.target=double\ getSurfaceArea()
comment8.text=\r\n\ This\ is\ a\ getter\ method\ that\ returns\ the\ surface\ area.\r\n\ \r\n\ @return\ double\ A\ double\ percent\ of\ surface\ area.\r\n
comment9.params=xCoord\ yCoord
comment9.target=int[]\ findClosest(int,\ int)
comment9.text=\r\n\ This\ is\ a\ method\ that\ returns\ the\ closest\ coloured\ pixel\ coordinate\ relative\ to\ an\ x\ coordinate\ and\ y\ coordinate.\r\n\ \r\n\ @param\ xCoord\ Location\ of\ x\ coordinate.\r\n\ @param\ yCoord\ Location\ of\ y\ coordinate.\r\n
numComments=18
